{"version":3,"sources":["components/Grid/Grid.styles.js","components/Block/Block.styles.js","components/Block/index.tsx","components/BlockWrapper/BlockWrapper.styles.js","components/BlockWrapper/index.tsx","components/Grid/index.tsx","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","span","Block","blockClassName","text","includes","className","BlockWrapper","index","children","Grid","emptyWrapperRef","useRef","blockWrappers","up","current","down","left","right","i","push","useEffect","containerSelector","containers","document","querySelectorAll","length","console","log","sourceContainer","swappable","Swappable","draggable","mirror","appendTo","constrainDimensions","updateClasses","newNum","newUp","newDown","newLeft","newRight","wrappers","slice","call","parentElement","blockOriginalClassName","substring","indexOf","trim","shuffle","available","emptyBlock","getElementsByClassName","emptyBlockWrapper","swapTarget","random","Math","swapBlockWrapper","swapBlock","innerHTML","outerHTML","indexIndex","on","event","source","classList","contains","cancel","wrapper","GlobalStyle","createGlobalStyle","Container","Faded","p","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.39052a0c.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    margin-top: 5%;\n    margin-bottom: 5%;\n    display: grid;\n    gap: 0.5rem;\n    \n    max-width: 68rem;\n\n    grid-template-rows: repeat(4, auto);\n    grid-template-columns: repeat(4, auto);\n\n    box-sizing: inherit;\n    \n    align-items: center;\n    justify-content: center;\n    justify-items: center;\n`","import styled from \"styled-components\";\n\nexport const BlockSpan = styled.span`\n    height: 100%;\n    position: relative;\n    display: block;\n`\n\nexport const Content = styled.div`\n    color: #d5c4a1;\n    background-color: #f2e5bc;\n    border: 0.5rem solid currentColor;\n    \n    h1 {\n        font-size: 2.5rem;\n        color: #928374;\n    }\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    text-align: center;\n\n    position: relative;\n    min-height: 8rem;\n    height: 100%;\n    min-width: 8rem;\n\n    box-sizing: inherit;\n`","import React from 'react';\n\nimport { Content } from \"./Block.styles\";\n\nconst Block = ( {blockClassName, text}: {blockClassName: string, text: string} ) => {\n    if(blockClassName.includes(\"isEmpty\")) text = \"\";\n    \n    return (\n        <span className={ blockClassName }>\n            <Content>\n                <h1>{text}</h1>\n            </Content>\n        </span>\n    );\n}\n\nexport default Block;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    height: 100%;\n    position: relative;\n    box-sizing: inherit;\n    display: flex;\n    \n    &:after {\n        content: \"\";\n        display: block;\n        height: 0;\n        width: 0;\n        padding-bottom: 100%;\n    }\n`\n","import React from \"react\";\n\nimport { Wrapper } from \"./BlockWrapper.styles\";\n\nconst BlockWrapper = ({index, children}: {index: number, children:React.ReactNode} ) => {\n    return (\n        <Wrapper className={ \"BlockWrapper index\" + index }>\n            { children }\n        </Wrapper>\n    )\n}\n\nexport default BlockWrapper;","import React, { useEffect, useRef } from \"react\";\nimport { Swappable } from \"@shopify/draggable\";\n\nimport { Wrapper } from \"./Grid.styles\";\n\n// Components\nimport Block from \"../Block\";\nimport BlockWrapper from \"../BlockWrapper\";\n\nconst Grid = () => {\n    \n    let emptyWrapperRef = useRef(15);\n    \n    let blockWrappers:Array<JSX.Element> = [];\n\n    // I hate react!!!1!11!1!!1!\n    \n    let up = emptyWrapperRef.current - 4;\n    let down = emptyWrapperRef.current + 4;\n    let left = emptyWrapperRef.current % 4 === 0 ? -420 : emptyWrapperRef.current - 1; // If block is on the left side there is no left block!\n    let right = emptyWrapperRef.current % 4 === 3 ? -420 : emptyWrapperRef.current + 1; // If block is on the right side there is no right block!\n    \n    for(let i = 0; i < 16; i++) {\n        let blockClassName = \"Block Block--item\" + i;\n\n        if(i === emptyWrapperRef.current || i === up || i === down || i === left || i === right) {\n            // Draggable if it's the empty block or neighbors\n            blockClassName += \" Block--isDraggable\"; \n            if(i === emptyWrapperRef.current) {\n                blockClassName += \" Block--isEmpty\";\n            }\n        }\n        \n        blockWrappers.push(\n            <BlockWrapper index={i} >\n                <Block\n                    blockClassName={ blockClassName }\n                    text={i + \"\"}\n                />\n            </BlockWrapper>\n        )\n    }\n    \n    useEffect(() => {\n        // Swappable\n        const containerSelector = \".BlockLayout\";\n        const containers = document.querySelectorAll(containerSelector);\n\n        if (containers.length === 0) {\n            console.log(\"Container length 0\");\n        }\n\n        const swappable = new Swappable(containers, {\n            draggable: \".Block--isDraggable\",\n            mirror: {\n                appendTo: containerSelector,\n                constrainDimensions: true,\n            }\n        });\n\n        swappable.on(\"swappable:start\", () => console.log(\"swappable:start\"));\n        swappable.on(\"swappable:swapped\", () => console.log(\"swappable:swapped\"));\n        swappable.on(\"swappable:stop\", () => console.log(\"swappable:stop\"));\n        \n        // Block user is dragging\n        let sourceContainer: HTMLElement;\n        \n        swappable.on(\"drag:start\", (event) => {\n            sourceContainer = event.source;\n            console.log(sourceContainer);\n            if(sourceContainer.classList.contains(\"Block--isEmpty\")) return;\n\n            event.cancel();\n        })\n        \n        swappable.on(\"swappable:swap\", (event) => {\n            // User is using empty block\n            if(sourceContainer.classList.contains(\"Block--isEmpty\")) return;\n            \n            // Else if user is swapping numbered with numbered cancel.\n            event.cancel();\n        });\n        \n        swappable.on(\"swappable:swapped\", () => {\n            let emptyBlockWrapper: HTMLElement;\n            let wrappers:HTMLElement[] = [].slice.call(sourceContainer.parentElement?.parentElement?.children);\n            for(let wrapper of wrappers) {\n                let child = wrapper.children[0];\n                if(child.className.includes(\"isEmpty\")) {\n                    emptyBlockWrapper = wrapper;\n                    break;\n                }\n            }\n            let indexIndex = emptyBlockWrapper!.className.indexOf(\"index\");\n            emptyWrapperRef.current = +(emptyBlockWrapper!.className.substring(indexIndex + 5, indexIndex + 7).trim());\n        });\n        \n        swappable.on(\"swappable:stop\", () => {\n            updateClasses();\n        })\n        \n        function updateClasses() {\n            let newNum = +emptyWrapperRef.current;\n            let newUp = newNum - 4;\n            let newDown = newNum + 4;\n            let newLeft = newNum % 4 === 0 ? -420 : newNum - 1; // If block is on the left side there is no left block!\n            let newRight = newNum % 4 === 3 ? -420 : newNum + 1; // If block is on the right side there is no right block!\n            \n            let wrappers:HTMLElement[] = [].slice.call(sourceContainer.parentElement?.parentElement?.children);\n            \n            for(let i = 0; i < 16; i++) {\n                let blockOriginalClassName = wrappers[i].children[0].className;\n                let blockClassName = \"Block Block--item\" + blockOriginalClassName.substring(blockOriginalClassName.indexOf(\"item\") + 4, blockOriginalClassName.indexOf(\"item\") + 6).trim();\n                \n                if(i === newNum || i === newUp || i === newDown || i === newLeft || i === newRight) {\n                    // Draggable if it's the empty block or neighbors\n                    blockClassName += \" Block--isDraggable\";\n                }\n                \n                if(i === newNum) blockClassName += \" Block--isEmpty\";\n                \n                wrappers[i].children[0].className = blockClassName;\n            }\n            \n            console.log(\"Updated\");\n            \n        }\n        \n        function shuffle() {\n            let newNum = +emptyWrapperRef.current;\n            let newUp = newNum - 4;\n            let newDown = newNum + 4;\n            let newLeft = newNum % 4 === 0 ? -420 : newNum - 1; // If block is on the left side there is no left block!\n            let newRight = newNum % 4 === 3 ? -420 : newNum + 1; // If block is on the right side there is no right block!\n            let available = [];\n            \n            let emptyBlock = document.getElementsByClassName(\"Block--isEmpty\")[0];\n            let emptyBlockWrapper = emptyBlock.parentElement;\n            \n            if(newUp >= 0 && newUp <= 15) available.push(newUp);\n            if(newDown >= 0 && newDown <= 15) available.push(newDown);\n            if(newLeft >= 0 && newLeft <= 15) available.push(newLeft);\n            if(newRight >= 0 && newRight <= 15) available.push(newRight);\n            \n            console.log(available);\n            \n            let random = Math.random();\n            let swapTarget;\n            for(let i = 0; i < available.length; i++) {\n                if(random < ((i + 1) * 1 / available.length)) {\n                    swapTarget = available[i];\n                    break;\n                }\n            }\n            \n            let swapBlockWrapper = document.getElementsByClassName(\"index\" + swapTarget)[0];\n            let swapBlock = swapBlockWrapper.children[0];\n            \n            console.log(emptyBlockWrapper);\n            console.log(swapBlockWrapper);\n            \n            emptyBlockWrapper!.innerHTML = \"\";\n            swapBlockWrapper.innerHTML = \"\";\n            \n            emptyBlockWrapper!.innerHTML = swapBlock.outerHTML;\n            swapBlockWrapper.innerHTML = emptyBlock.outerHTML;\n            \n            sourceContainer = document.getElementsByClassName('Block--item15')[0] as HTMLElement;\n            \n            let indexIndex = swapBlockWrapper.className.indexOf(\"index\");\n            emptyWrapperRef.current = +(swapBlockWrapper.className.substring(indexIndex + 5, indexIndex + 7).trim());\n            \n            updateClasses();\n        }\n        \n        for(let i = 0; i < 100; i++)\n            shuffle();\n        \n    })\n    \n    // I hate react\n    return (\n        <Wrapper className=\"BlockLayout\">\n            { blockWrappers }\n        </Wrapper>\n    )\n};\n\nexport default Grid;","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n\n@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;0,900;1,400;1,500;1,700;1,900&display=swap');\n\n    * {\n        font-family: 'Roboto', sans-serif;\n    }\n\n    html {\n        box-sizing: border-box;\n        font-size: 62.5%\n        line-height: 1;\n    }\n\n    *, *:before, *:after {\n        box-sizing: inherit;\n    }\n\n    body {\n        margin: 0;\n        padding: 0;\n        background-color: #f2e5bc;\n\n        h1 {\n            text-align: center;\n            font-size: 4rem;\n            color: #427b58;\n            font-weight: 900;\n        }\n\n        p {\n            font-size: 2rem;\n            color: #689d6a;\n            font-weight: 600;\n            padding-left: 10%;\n            padding-right: 10%;\n        }\n    }\n`\n\nexport const Container = styled.div`\n    height: auto;\n    padding-left: 25%;\n    padding-right: 25%;\n    padding-bottom: 2%;\n    align-items: center;\n    justify-content: center;\n    justify-items: center;\n    align-content: center;\n`\n\nexport const Faded = styled.p`\n    margin-top: 5%;\n    color: #458588;\n    font-size: 1.2rem;\n    font-weight: 400;\n    text-align: justify;\n    text-justify: inter-word;\n    opacity: 80%;\n`","import React from \"react\";\n\n// Components\nimport Grid from \"./components/Grid\";\n\nimport { GlobalStyle, Container, Faded } from \"./GlobalStyle\";\n\nconst App = () => {\n\treturn (\n\t\t<Container>\n\t\t\t<h1>Welcome to the Sliding Game!</h1>\n\t\t\t<p>\n\t\t\t\tTo win the game, arrange the numbers from 0 to 14 in order from\n\t\t\t\tleft to right and top to bottom. Drag and drop the numbers to\n\t\t\t\trearrange the numbers.\n\t\t\t</p>\n\t\t\t<Grid />\n\t\t\t<GlobalStyle />\n\n\t\t\t<Faded>\n\t\t\t\tKevin Liao\n\t\t\t\t<br />\n\t\t\t\tWeb Development Section 83 EVEN\n\t\t\t\t<br />\n\t\t\t\t2021/11/04\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\tReflection: This is the first time I've used React, and I\n\t\t\t\talready dislike it. I recognize the philosphy behind it, but the\n\t\t\t\tway the components interact are so limiting. I spent days\n\t\t\t\tfiguring out how components can interact with one another, and\n\t\t\t\tnone of the solutions worked. It was so bad I had to resort to\n\t\t\t\tregular JavaScript functions. Hopefully I will have better luck\n\t\t\t\tnext time! This is a first project after all.\n\t\t\t\t<br />\n\t\t\t\tTo make the actual sliding game interactive, I used a library\n\t\t\t\tcalled Draggable by Shopify. I wanted to use this library\n\t\t\t\tbecause I wasn't satisfied with the regular drag and drop\n\t\t\t\tfeatures, and Draggable makes dragging and dropping very smooth.\n\t\t\t\t<br />\n\t\t\t\tAlthough this project took so much longer than expected\n\t\t\t\t(Especilly with college applications in the way!) I was happy\n\t\t\t\twith what I've achieved and all that I've learned about React\n\t\t\t\tand making web projects. I thought React was going to be easy\n\t\t\t\tand the CSS will be hard, and I was wrong! I will definitely try\n\t\t\t\tand use React for future projects as well to try and improve my\n\t\t\t\tweb deveopment skills.\n\t\t\t</Faded>\n\t\t</Container>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}